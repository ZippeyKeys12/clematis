enum Cl_ELogSeverity{
    LOG_Fatal,
    LOG_Error,      // cl_logging_level = 1
    LOG_Warning,    // cl_logging_level = 2
    LOG_Info,       // cl_logging_level = 3
    LOG_Debug,      // cl_debugging = true

    // DEPRECATED
    LOG_None = LOG_Info
}

class Cl_Util{
    static
    clearscope
    void Print(String Output, Name CVarName, bool Mid=false){
        if(CVar.FindCVar(CVarName).GetBool()){
            if(Mid)
                Console.MidPrint(SmallFont, Output);
            else
                Console.PrintF(Output);
        }
    }

    static
    clearscope
    bool Log(Name Owner, Cl_ELogSeverity severity, String LogText,
        uint Offset=0, bool overrideLogLevel=false){
        if (!overrideLogLevel){
            if (severity > CVar.FindCVar('cl_logging_level').GetInt()
                && severity != LOG_Fatal && severity != LOG_Debug)
                return false;

            if (severity == LOG_Debug && !CVar.FindCVar('cl_debugging').GetBool())
                return false;
        }

        String Color, Result;
        [Color, Result]=LogLabel(severity);

        if (Result!="")
            Result=Result.." - ";

        for (int i=0; i<Offset; i++)
            Result=" "..Result;

        if (Owner!='')
            Result="["..Owner.."] "..Result;

        LogText=Color..Result..LogText;
        Console.PrintF(LogText);
        if(severity == LOG_Fatal)
            ThrowAbortException(LogText);
        
        return true;
    }

    static
    clearscope
    String, String LogLabel(Cl_ELogSeverity Severity){
        switch(Severity){
            case LOG_Info:      return "",      "INFO";
            case LOG_Warning:   return "\cx",   "WARN";
            case LOG_Error:     return "\cr",   "ERROR";
            case LOG_Fatal:     return "\cy",   "FATAL";
            default:            return "",      "";
        }
    }
}
