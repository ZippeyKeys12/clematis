class Clematis abstract{
    bool VerboseEnabled;

    Array<uint> Failures;
    Array<uint> Successes;
    Array<uint> StartTimes;
    Array<uint> StartResultIndex;

    Array<Name> TestSuiteNames;

    Array<Cl_Result> Results;

    static
    Clematis Create(Class<Clematis> Type)
    {return Clematis(new(Type)).Init();}

    /* How to run
     * Runs test upon creation by default
     * With that setup one has 3 options
     *
     * 1. Console Command
     *     netevent test:ClematisExample
     * 2. EventHandler call
     *     EventHandler.SendNetworkEvent('test:ClematisExample');
     * 3. Factory method
     *     Clematis.Create('ClematisExample');
     *
     * Otherwise one can instatiate the test and call run on it
     *     Clematis TestSuite=Clematis.Create('ClematisExample');
     *     TestSuite.Run();
     */

    virtual
    Clematis Init(){
        Run();
        return self;
    }

    virtual
    void Run(){
        Reset();
        BeforeAll();
        TestSuites();
        AfterAll();
    }

    virtual
    void Reset(){}

    virtual
    void BeforeAll(){}

    virtual
    void TestSuites(){
        /* Example
         * Describe('Testing Player Stats');
         *     It('MaxHealth', MaxHealth<100, LOG_Warning);
         *     It('Math', 1+1==2, LOG_Fatal);
         * EndDescribe();
         */
    }

    virtual
    void AfterAll(){}

    void Describe(Name TestSuiteName){
        TestSuiteNames.Push(int(TestSuiteName));
        StartResultIndex.Push(Results.Size());
        Failures.Push(0);
        Successes.Push(0);
        StartTimes.Push(MSTime());
        TabbedLog(LOG_None, "START SUITE: "..TestSuiteName);
    }

    void EndDescribe(){
        uint EndTime=MSTime()-StartTimes[StartTimes.Size()-1];
        StartTimes.Pop();
        uint Failures=0
           , Successes=0;
        uint StartIndex=StartResultIndex[StartResultIndex.Size()-1];
        for(int i=StartIndex; i<Results.Size(); i++){
            Cl_Result Curr=Results[i];
            String Suff;
            if(Curr.Success){
                Suff="Successful";
                Curr.Severity=LOG_Info;
                Successes++;
            }else{
                Suff="Failure";
                Failures++;
            }
            TabbedLog(Curr.Severity, "Task "..Curr.Name..": "..Suff.." - Took ~"..Curr.DeltaTime.." ms", 1);
            Results.Pop();
        }
        for(int i=StartIndex; i<Results.Size(); i++)
            Results.Pop();
        StartResultIndex.Pop();
        TabbedLog(LOG_None, "END SUITE: "..TestSuiteNames[TestSuiteNames.Size()-1].." - Took ~"..EndTime.." ms");
        TabbedLog(LOG_None, TestsRunTotal(Failures,  Successes).." Tests Run, "..SuccessesTotal(Successes).." Tests Succeeded, "..FailuresTotal(Failures).." Test Failed");
        AddTestsRunTotal(Successes, Failures);
        TestSuiteNames.Pop();
    }

    void It(Name TestCaseName, Cl_Assertion Assertion, Cl_ELogSeverity Severity){
        uint DeltaTime=MSTime();
        bool Condition=Assertion.Eval();
        DeltaTime=DeltaTime-MSTime();
        Results.Push(Cl_Result.Create(TestCaseName, Condition, Severity, DeltaTime));
    }

    void AddTestsRunTotal(uint NewSuccesses, uint NewFailures){
        Successes.Pop();
        if(Successes.Size())
            Successes[Successes.Size()-1]+=NewSuccesses;
        Failures.Pop();
        if(Failures.Size())
            Failures[Failures.Size()-1]+=NewFailures;
    }

    uint SuccessesTotal(uint NewSuccesses) const
    {return Successes[Successes.Size()-1]+NewSuccesses;}

    uint FailuresTotal(uint NewFailures) const
    {return Failures[Failures.Size()-1]+NewFailures;}

    uint TestsRunTotal(uint NewSuccesses, uint NewFailures) const
    {return SuccessesTotal(NewSuccesses)+FailuresTotal(NewFailures);}

    void Log(Cl_ELogSeverity Severity, String LogText, uint Offset=0, bool Verbose=false){
        if(!Verbose || VerboseEnabled)
            Cl_Util.Log(GetClassName(), Severity, LogText, Offset);
    }

    void TabbedLog(Cl_ELogSeverity Severity, String LogText, uint Offset=0, bool Verbose=false){
        if(!Verbose || VerboseEnabled)
            Cl_Util.Log(GetClassName(), Severity, LogText, TestSuiteNames.Size()+Offset-1);
    }
}