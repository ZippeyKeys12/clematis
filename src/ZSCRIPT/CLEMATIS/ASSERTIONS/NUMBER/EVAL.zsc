class Cl_AssertEval:Cl_Assertion{
    double Val1,
           Val2;

    String Operator;

    static
    Cl_Assertion Create(double Val1, String Operator, double Val2, String ErrorMsg=""){
        Cl_AssertEval Result=new('Cl_AssertEval');
        Result.Val1=Val1;
        Result.Operator=Operator;
        Result.Val2=Val2;
        if(ErrorMsg==""){
            if (Operator=="=" || Operator=="==")
                Result.ErrorMsg = String.Format("%f does not equal %f", Val1, Val2);
            else if (Operator == "!=")
                Result.ErrorMsg = String.Format("%f equals %f", Val1, Val2);
            else if (Operator == "<")
                Result.ErrorMsg = String.Format("%f was not less than %f", Val1, Val2);
            else if (Operator==">")
                Result.ErrorMsg = String.Format("%f was not greater than %f", Val1, Val2);
            else if (Operator=="<=")
                Result.ErrorMsg = String.Format("%f was not less than or equal to %f", Val1, Val2);
            else if (Operator==">=")
                Result.ErrorMsg = String.Format("%f was not greater than or equal to %f", Val1, Val2);
        }else
            Result.ErrorMsg = String.Format(ErrorMsg, Val1, Val2);
        return Result;
    }

    override
    bool Eval(){
        if(Operator=="=" || Operator=="==")
            return Val1==Val2;
        else if (Operator == '!=')
            return Val1 != Val2;
        else if(Operator=="<")
            return Val1<Val2;
        else if(Operator==">")
            return Val1>Val2;
        else if(Operator=="<=")
            return Val1<=Val2;
        else if(Operator==">=")
            return Val1>=Val2;
        else if(Operator=="~=" || Operator=="~==")
            return Val1~==Val2;
        else
            return false;
    }
}

extend
class Clematis{
    Cl_Assertion AssertEval(double Val1, String Operator, double Val2, String ErrorMsg="")
    {return Cl_AssertEval.Create(Val1, Operator, Val2, ErrorMsg);}
}